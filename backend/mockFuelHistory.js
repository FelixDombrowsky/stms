// mockFuelHistory.js
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö batch ‡∏•‡∏á InfluxDB v2

import { InfluxDB, Point } from "@influxdata/influxdb-client";
import dotenv from "dotenv";
dotenv.config();

/**
 * ---------- CONFIG ----------
 * ‡πÉ‡∏ä‡πâ .env ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ
 * INFLUX_URL=http://localhost:8086
 * INFLUX_ORG=stms_org
 * INFLUX_BUCKET=fuel_level_data
 * INFLUX_TOKEN=your_token_here
 */
const url = process.env.INFLUX_URL || "http://localhost:8086";
const org = process.env.INFLUX_ORG || "stms_org";
const bucket = process.env.INFLUX_BUCKET || "fuel_level_data";
const token =
  "XQqONf2Z9huolYHrlhf328W34fsaxrkeNXEuieb1VBtOf_Bej0pkbq9FJGGnyQdkT_LC6KYZbjTiJlYB4dL36w=="; // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ token (v2 ‡∏ï‡πâ‡∏≠‡∏á auth ‡∏î‡πâ‡∏ß‡∏¢ token)

const MEAS = "fuel_level_test";
const TANK_CODE = "001";

// ‡πÄ‡∏ß‡∏•‡∏≤/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î
const STEP_SEC = 5; // ‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≠)
const DURATION_DAYS = 90; // 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ~ 90 ‡∏ß‡∏±‡∏ô
const NOW = Date.now();
const START = NOW - DURATION_DAYS * 24 * 60 * 60 * 1000;
const STEP_MS = STEP_SEC * 1000;

// ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ñ‡∏±‡∏á (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
const CAPACITY_L = 30000;
const HEIGHT_MM = 2000; // ‡∏™‡∏π‡∏á‡∏ñ‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ (‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì fuel_height linear)
const WATER_MAX_L = 600; // ‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏ô‡πâ‡∏≥
const WATER_MAX_MM = 200;

// Write options
const influxDB = new InfluxDB({ url, token });
// ‡πÉ‡∏ä‡πâ ns precision, ‡πÅ‡∏•‡∏∞‡∏•‡∏î batchSize ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÄ‡∏°‡∏°‡∏û‡∏∏‡πà‡∏á/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
const writeApi = influxDB.getWriteApi(org, bucket, "ns", {
  batchSize: 5000,
  flushInterval: 5000, // ms
  maxBufferLines: 30000,
});

/** ---------- Helpers ---------- */

// ‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á
const rand = (min, max) => Math.random() * (max - min) + min;
const clamp = (v, min, max) => Math.max(min, Math.min(max, v));

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
const statusFromPercent = (p) => {
  if (p > 90) return "high_alarm";
  if (p > 80) return "high_alert";
  if (p < 10) return "low_alarm";
  return "normal";
};

// ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏π‡∏á ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ï‡πà‡∏≥ (‡∏ã‡∏≤‡∏¢‡∏ô‡πå‡πÄ‡∏ß‡∏ü + noise)
const tempAtTimestamp = (ts) => {
  const d = new Date(ts);
  const hour = d.getHours() + d.getMinutes() / 60;
  // ‡∏™‡∏ß‡∏¥‡∏á‡∏à‡∏≤‡∏Å 26 ‚Üí 40 ‡∏≠‡∏á‡∏®‡∏≤
  const base = 33 + 7 * Math.sin(((hour - 12) / 24) * 2 * Math.PI); // peak @ ~‡∏ö‡πà‡∏≤‡∏¢
  return clamp(base + rand(-1, 1), 25, 42);
};

// ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏•‡∏¥‡∏ï‡∏£/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const consumptionRateLps = (ts) => {
  const h = new Date(ts).getHours();
  // ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô 6-22 ‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≠‡∏¢
  if (h >= 6 && h < 22) {
    return rand(0.02, 0.06); // 72‚Äì216 L/h
  }
  return rand(0.005, 0.02); // 18‚Äì72 L/h ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
};

// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏≤‡∏ß
// ‡∏Ñ‡∏∑‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏•‡∏¥‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏° ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°)
// ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏ï‡∏¥‡∏° ~ ‡∏ó‡∏∏‡∏Å 2-4 ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì 20‚Äì60% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏
const refillEventLiters = (ts, lastRefillTs) => {
  const daysSince = (ts - lastRefillTs) / (1000 * 60 * 60 * 24);
  if (daysSince < 2) return 0;
  // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πÄ‡∏ï‡πá‡∏õ ‡∏ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á >2 ‡∏ß‡∏±‡∏ô
  if (Math.random() < 0.0005) {
    return rand(0.2 * CAPACITY_L, 0.6 * CAPACITY_L);
  }
  return 0;
};

// ‡∏ô‡πâ‡∏≥ (volume/height) ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏™‡∏ß‡∏¥‡∏á/‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
const nextWater = (prevVolume, prevHeight) => {
  let vol = clamp(prevVolume + rand(-5, 15), 0, WATER_MAX_L);
  let h = clamp(prevHeight + rand(-2, 2), 0, WATER_MAX_MM);
  return [vol, h];
};

/** ---------- Main Backfill ---------- */
async function run() {
  if (!token) {
    console.error(
      "‚ùå INFLUX_TOKEN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env ‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö InfluxDB v2"
    );
    process.exit(1);
  }

  console.log("üöÄ Start backfill:");
  console.log(
    `- Range: ${new Date(START).toISOString()} ‚Üí ${new Date(NOW).toISOString()}`
  );
  console.log(`- Step: ${STEP_SEC}s, Days: ${DURATION_DAYS}`);
  console.log(
    `- Approx points: ~${Math.floor(
      (NOW - START) / STEP_MS
    ).toLocaleString()} points`
  );

  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  let ts = START;
  let fuelVolume = rand(0.4 * CAPACITY_L, 0.8 * CAPACITY_L);
  let waterVolume = rand(50, 200);
  let waterHeight = (waterVolume / WATER_MAX_L) * WATER_MAX_MM;
  let lastRefillTs = START - 4 * 24 * 60 * 60 * 1000; // ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô batch ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ flush ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
  const BATCH_LINES = 10000;
  let written = 0;
  let buffered = 0;

  try {
    for (; ts <= NOW; ts += STEP_MS) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      const dL = consumptionRateLps(ts) * STEP_SEC;
      fuelVolume = clamp(fuelVolume - dL, 0, CAPACITY_L);

      // ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô
      const refillL = refillEventLiters(ts, lastRefillTs);
      if (refillL > 0) {
        fuelVolume = clamp(fuelVolume + refillL, 0, CAPACITY_L);
        lastRefillTs = ts;
      }

      // ‡∏ô‡πâ‡∏≥
      [waterVolume, waterHeight] = nextWater(waterVolume, waterHeight);

      // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      const fuelPercent = (fuelVolume / CAPACITY_L) * 100;
      const fuelHeight = (fuelVolume / CAPACITY_L) * HEIGHT_MM; // approx. linear
      const temp = tempAtTimestamp(ts);
      const status = statusFromPercent(fuelPercent);

      const p = new Point(MEAS)
        .tag("tank_code", TANK_CODE)
        .floatField("fuel_volume", fuelVolume)
        .floatField("fuel_percent", fuelPercent)
        .floatField("fuel_height", fuelHeight)
        .floatField("water_volume", waterVolume)
        .floatField("water_height", waterHeight)
        .floatField("temp", temp)
        .stringField("status", status)
        .timestamp(new Date(ts)); // ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á

      writeApi.writePoint(p);
      buffered++;
      written++;

      // ‡πÅ‡∏™‡∏î‡∏á progress ‡∏ö‡πâ‡∏≤‡∏á
      if (written % 50000 === 0) {
        console.log(
          `... progress: ${written.toLocaleString()} points @ ${new Date(
            ts
          ).toISOString()}`
        );
      }

      // ‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö flush ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ ‡πÜ ‡∏Å‡∏±‡∏ô‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÇ‡∏ï‡πÄ‡∏Å‡∏¥‡∏ô
      if (buffered >= BATCH_LINES) {
        await writeApi.flush();
        buffered = 0;
      }
    }

    // flush ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    await writeApi.close();
    console.log(
      `‚úÖ Backfill done. Total written: ~${written.toLocaleString()} points`
    );
  } catch (err) {
    console.error("‚ùå Backfill error:", err);
    try {
      await writeApi.close();
    } catch (e2) {
      console.error("‚ùå Error on closing writeApi:", e2);
    }
    process.exit(1);
  }
}

run()
  .then(() => process.exit(0))
  .catch((e) => {
    console.error("‚ùå Fatal:", e);
    process.exit(1);
  });
